                ----------
                Quickstart
                ----------

Quickstart

    Add ${project.artifactId} to your project. If you're using Maven add the following dependency to your pom. (You can
    also use ${project.name} with {{{./dependency-info.html}other build systems}}.)

+--
<dependency>
  <groupId>${project.groupId}</groupId>
  <artifactId>${project.artifactId}</artifactId>
  <version>${project.version}</version>
</dependency>
+--

    Then write a test that needs a spring context.

+--
public class SomeTest {

    @Rule
    public SpringContext springContext = SpringContext.builder()
            .config(SomeConfig.class, MoreConfig.class)
            .build();

    @Test
    public void someTestUsingFooService() {
        FooService fooService = springContext.getBean(FooService.class);
        Object result = fooService.performAction();
        // various assertions
    }

}
+--

* Autowiring

    But I don't want to keep retrieving beans from the SpringContext. Don't worry, the SpringContext rule supports
    autowiring.

+--
@Autowired
private FooService fooService;

@Autowired
private BarRepository;

@Rule
public SpringContext springContext = SpringContext.builder()
        .config(SomeConfig.class, MoreConfig.class)
        .autowire(this)
        .build();
+--

* Additional Beans

    Additional singleton beans can be provided to the SpringContext by calling the singleton method.

+--
@Rule
public SpringContext springContext = SpringContext.builder()
        .config(SomeConfig.class, MoreConfig.class)
        .singleton("someBean", new SomeBean())
        .autowire(this)
        .build();
+--

* Mocks

    Mocks can be provided to the SpringContext as additional singletons.

+--
import static org.mockito.Mockito.*

public class TestWithMocks {

    @Rule
    public SpringContext springContext = SpringContext.builder()
            .config(ServiceConfig.class, MockConfig.class)
            .singleton("fooRepository", mock(FooRepository.class))
            .build();

    @Test
    public void systemShouldBehaveInSomeManner() {
        final FooRepository mockFooRepository = springContext.getBean(FooRepository.class);
        final Foo xyzFoo = ....
        when(mockFooRepository.load("xyz")).thenReturn(xyzFoo);
        ...
    }
}
+--

